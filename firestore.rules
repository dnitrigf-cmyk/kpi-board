rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    function signedIn() { return request.auth != null; }
    function userDoc(uid) { return get(/databases/$(database)/documents/users/$(uid)); }
    function roleInDept(uid, depId) { return userDoc(uid).data.departments[depId]; }
    function isDeptAdmin(uid, depId) { return roleInDept(uid, depId) == "admin"; }

    match /users/{uid} {
      allow read: if signedIn();
      allow create: if signedIn() && request.auth.uid == uid;
      allow update: if signedIn() && request.auth.uid == uid
        && !( "departments" in request.resource.data && request.resource.data.departments != resource.data.departments );
      allow delete: if false;
    }

    match /departments/{depId} {
      allow read: if signedIn();
      allow create, update, delete: if signedIn() && isDeptAdmin(request.auth.uid, depId);
    }

    // boards: one per user per department
    match /boards/{boardId} {
      allow read: if signedIn();
      allow create: if signedIn()
        && request.resource.data.departmentId is string
        && (
          // владелец создаёт свою доску
          (request.resource.data.ownerUid == request.auth.uid) ||
          // админ департамента может создавать доски для отдела
          isDeptAdmin(request.auth.uid, request.resource.data.departmentId)
        );

      allow update, delete: if signedIn()
        && (
          // владелец может править свою доску
          (resource.data.ownerUid == request.auth.uid) ||
          // админ своего департамента может править любые доски в нём
          isDeptAdmin(request.auth.uid, resource.data.departmentId)
        )
        // защитим поля от смены принадлежности
        && request.resource.data.departmentId == resource.data.departmentId
        && request.resource.data.userName == resource.data.userName
        ;
    }
  }
}